name: Deploy n8n to Kubernetes

on:
  workflow_dispatch:
    inputs:
      deploy_type:
        description: 'Type of deployment'
        required: true
        type: choice
        options:
          - initial
          - update
        default: update

jobs:
  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
      
      - name: Inject secrets into manifests
        run: |
          cd n8n-hosting/kubernetes
          
          # Replace placeholders in n8n-secret.yaml
          sed -i "s|PLACEHOLDER_REPLACED_BY_CI|${{ secrets.N8N_ENCRYPTION_KEY }}|g" n8n-secret.yaml
          sed -i "s|N8N_RUNNERS_AUTH_TOKEN: \"PLACEHOLDER_REPLACED_BY_CI\"|N8N_RUNNERS_AUTH_TOKEN: \"${{ secrets.N8N_RUNNERS_AUTH_TOKEN }}\"|g" n8n-secret.yaml
          
          # Replace placeholders in postgres-secret.yaml
          sed -i "s|PLACEHOLDER_REPLACED_BY_CI|${{ secrets.POSTGRES_PASSWORD }}|g" postgres-secret.yaml
          
          echo "‚úÖ Secrets injected successfully"
      
      - name: Update image tags to use custom images
        run: |
          cd n8n-hosting/kubernetes
          
          # Update to use your custom images from GHCR
          sed -i "s|image: docker.n8n.io/n8nio/n8n:.*|image: ghcr.io/${{ github.repository_owner }}/n8n:latest|g" \
            n8n-deployment-queue-mode.yaml n8n-worker-deployment.yaml
          
          sed -i "s|image: ghcr.io/n8n-io/runners:.*|image: ghcr.io/${{ github.repository_owner }}/runners:latest|g" \
            n8n-runner-deployment.yaml
          
          echo "‚úÖ Image references updated"
      
      - name: Deploy to Kubernetes
        run: |
          cd n8n-hosting/kubernetes
          
          if [ "${{ inputs.deploy_type }}" = "initial" ]; then
            echo "üöÄ Running initial deployment..."
            kubectl apply -f namespace.yaml
            kubectl apply -f postgres-secret.yaml
            kubectl apply -f n8n-secret.yaml
            kubectl apply -f postgres-claim0-persistentvolumeclaim.yaml
            kubectl apply -f n8n-claim0-persistentvolumeclaim.yaml
            kubectl apply -f redis-claim0-persistentvolumeclaim.yaml
            kubectl apply -f redis-deployment.yaml
            kubectl apply -f postgres-configmap.yaml
            kubectl apply -f postgres-deployment.yaml
            kubectl apply -f postgres-service.yaml
            
            echo "‚è≥ Waiting for PostgreSQL..."
            kubectl wait --for=condition=ready pod -l service=postgres-n8n -n n8n --timeout=300s
            
            echo "‚è≥ Waiting for Redis..."
            kubectl wait --for=condition=ready pod -l service=redis -n n8n --timeout=300s
            
            kubectl apply -f n8n-deployment-queue-mode.yaml
            kubectl apply -f n8n-service.yaml
            kubectl apply -f n8n-main-service.yaml
            
            echo "‚è≥ Waiting for n8n main..."
            kubectl wait --for=condition=ready pod -l service=n8n-main -n n8n --timeout=300s
            
            kubectl apply -f n8n-worker-deployment.yaml
            kubectl apply -f n8n-runner-deployment.yaml
            
            echo "‚úÖ Initial deployment complete!"
          else
            echo "üîÑ Updating existing deployment..."
            kubectl apply -f n8n-secret.yaml
            kubectl apply -f postgres-secret.yaml
            kubectl apply -f n8n-deployment-queue-mode.yaml
            kubectl apply -f n8n-worker-deployment.yaml
            kubectl apply -f n8n-runner-deployment.yaml
            
            echo "‚úÖ Update complete!"
          fi
      
      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/n8n-main -n n8n --timeout=10m
          kubectl rollout status deployment/n8n-worker -n n8n --timeout=10m
          kubectl rollout status deployment/n8n-runner -n n8n --timeout=10m
      
      - name: Get access URL
        run: |
          echo "=========================================="
          echo "n8n Deployment Complete!"
          echo "=========================================="
          kubectl get svc n8n -n n8n
          echo ""
          echo "Access n8n at the EXTERNAL-IP above on port 5678"
          echo "=========================================="

